using Microsoft.VisualStudio.TestTools.UnitTesting;
using CricketScorer.Core.Models;
using CricketScorer.Core.Services;
using System;
using System.Collections.Generic;

namespace CricketScorer.Tests
{
    [TestClass]
    public class SummaryFormatterTests
    {
        [TestMethod]
        public void FormatSummaryText_ShouldIncludeCorrectScoresAndWickets()
        {
            // Arrange
            var result = new MatchResult
            {
                TeamA = "Tuddenham",
                TeamB = "Old Newton",
                DatePlayed = new DateTime(2025, 5, 25),
                ResultText = "Tuddenham won by 10 runs.",
                TeamAScore = 90,
                TeamABattingRuns = 80,
                TeamAExtras = 10,
                TeamAWickets = 5,
                TeamBScore = 80,
                TeamBBattingRuns = 72,
                TeamBExtras = 8,
                TeamBWickets = 3,
                TeamABowlingStats = new List<BowlerStat>
                {
                    new BowlerStat { Bowler = "Alice", RunsConceded = 20, Wickets = 2, ExtrasConceded = 2 },
                    new BowlerStat { Bowler = "Beth", RunsConceded = 25, Wickets = 3, ExtrasConceded = 6 }
                },
                TeamBBowlingStats = new List<BowlerStat>
                {
                    new BowlerStat { Bowler = "Clara", RunsConceded = 30, Wickets = 2, ExtrasConceded = 4 },
                    new BowlerStat { Bowler = "Diana", RunsConceded = 50, Wickets = 1, ExtrasConceded = 6 }
                }
            };

            var formatter = new Formatter();

            // Act
            var summary = formatter.FormatSummaryText(result);

            // Assert
            StringAssert.Contains(summary, "Tuddenham Score: 90/5 (Batting: 80, Extras: 10)");
            StringAssert.Contains(summary, "Old Newton Score: 80/3 (Batting: 72, Extras: 8)");
            StringAssert.Contains(summary, "Alice - Runs: 20, Wkts: 2, Extras: 2");
            StringAssert.Contains(summary, "Diana - Runs: 50, Wkts: 1, Extras: 6");
            StringAssert.Contains(summary, "Generated by Petes Simple Softball Scorer");
        }

        [TestMethod]
        public void FormatSummaryText_ComputedMatch_ShouldReflectCorrectRunsAndWickets()
        {
            // Arrange
            var match = CreateSampleMatch();
            var result = MatchConverter.BuildMatchResult(match);

            var formatter = new Formatter(); // or static call if applicable
            var summary = formatter.FormatSummaryText(result);

            // Act & Assert: Check derived totals
            Assert.AreEqual(7, result.TeamABattingRuns, "TeamABattingRuns doesn't tally"); // 1 + 4 + 2
            Assert.AreEqual(1, result.TeamAExtras, "Extras don't tally");      // 1 wide
            Assert.AreEqual(-2, result.TeamAScore, "Score doesn't match");
            Assert.AreEqual(2, result.TeamAWickets, "TeamAWickets don't tally");     // 2 credited dismissals

            Assert.AreEqual(10, result.TeamBBattingRuns, "TeamBBattingRuns don't tally"); // 3 + 2 + 1 + 4
            Assert.AreEqual(1, result.TeamBExtras, "TeamBExtras don't tally");       // 1 no-ball
            Assert.AreEqual(6, result.TeamBScore, "TeamBScore doesn't tally");
            Assert.AreEqual(1, result.TeamBWickets, "TeamBWickets don't tally");      // 1 credited dismissal

            // Final: Validate the output contains derived values
            StringAssert.Contains(summary, "Tuddenham Score: -2/2 (Batting: 7, Extras: 1)");
            StringAssert.Contains(summary, "Old Newton Score: 6/1 (Batting: 10, Extras: 1)");
        }

        private Match CreateSampleMatch()
        {
            return new Match
            {
                TeamA = "Tuddenham",
                TeamB = "Old Newton",
                MatchDate = new DateTime(2025, 5, 25),
                FirstInningsOvers = new List<Over>
                    {
                        new Over
                        {
                            Bowler = "Clara",
                            Batter1 = "Alice",
                            Batter2 = "Beth",
                            Deliveries = new List<Ball>
                            {
                                new Ball { Runs = 1 },
                                new Ball { Runs = 4 },
                                new Ball { Runs = 0, IsWicket = true, DismissalType = "Caught" },
                                new Ball { Runs = 2 },
                                new Ball { Runs = 1, IsWide = true },
                                new Ball { Runs = 0, IsWicket = true, DismissalType = "Bowled" }
                            }
                        }
                    },
                            SecondInningsOvers = new List<Over>
                    {
                        new Over
                        {
                            Bowler = "Diana",
                            Batter1 = "Gemma",
                            Batter2 = "Kate",
                            Deliveries = new List<Ball>
                            {
                                new Ball { Runs = 3 },
                                new Ball { Runs = 2 },
                                new Ball { Runs = 1 },
                                new Ball { Runs = 0, IsWicket = true, DismissalType = "Hit Wicket" },
                                new Ball { Runs = 1, IsNoBall = true },
                                new Ball { Runs = 4 }
                            }
                        }
                    }
            };
        }
    }

}

